<?xml version="1.0" ?>
<!--This file contains the SDF model of a KUKA iiwa robot with a wsg50 gripper.
    It has been produced from the varients in //third_party/robotics/models.
    Note:  This file is temporary, and should be deleted once Bullet supports
    importing models in SDF.  Also, this file has been specialized for Bullet,
    because the mass of the base link has been set to 0, as needed by Bullet.
    Note:  All of the gripper link poses have been adjusted in the z direction
    to achieve a reasonable position of the gripper relative to the arm.
    Note: The joint names for the KUKA have been changed to J0, J1, etc. -->
    <!--There is problem with the kuka mesh and everytime i use it gazebo crashes so I am gonna comment that part-->
<%

    require 'matrix'
    require 'erb'
    require 'yaml'


    def string_array_to_array(string)
        array = []
        str_array = string.split(" ")
        for str_num in str_array
            array.append(str_num.to_f)
        end
        return array
        
    end

    def rgb256ToDecimal(rgba)
        r = rgba[0]/256.0
        g = rgba[1]/256.0
        b = rgba[2]/256.0
        #  a stand for opacity 
        a = rgba[3]

        return [r,g,b,a]
    end
       
    def degreeToRadian(degrees)
        radians = degrees * Math::PI / 180 
        return radians
    end
    
    def a_to_s(v)#converts array to string
      Array(v).join(" ")
    end
    
    def point_on_a_line(pointA,pointB,t)
        direction = {
                     'x'=>pointA[0]-pointB[0],
                     'y'=>pointA[1]-pointB[1],
                     'z'=>pointA[2]-pointB[2]
                    }
        point_on_this_line = {
            'x'=> pointA[0]+t*direction['x'],
            'y'=> pointA[1]+t*direction['y'],
            'z'=> pointA[2]+t*direction['z']
        }
        pos = [point_on_this_line['x'],point_on_this_line['y'],point_on_this_line['z']] 
        return pos
    end

    def modefy_mesh_path(lib_path,mesh_path)
        mesh_path.each do |key,value|
          mesh_path[key] =  lib_path+"/"+value
        #   puts mesh_path[key]
        end
        return mesh_path
    end

    class Base
        #constants
        M_PI = 3.1415926535897931
        attr_accessor :forearm,:palm,:palm_fake,:grasp_axis,:mesh_c,:mesh_v,:model
        def initialize(sim_env,load_setting,path,lib_path,grasp_axis_offset)
            
            @forearm ={  # link
                'link_name'=>"forearm",
                'pose'=> [0,0,0,
                0,0,M_PI/2],
                # inetia 
                'pose_i'=> [0,0,0.09,
                                 0,0,0],                   
                'mass'=> 1.8,
                'ixx'=> 0.108 ,'ixy'=> 0     ,'ixz'=> 0 ,
                'iyy'=> 0.108 ,'iyz'=> 0     ,'izz'=> 0.054 ,
                #joint
                "p_name" =>"palm",
                "j_name" =>"forearm_world",
                "j_type" =>'fixed',
                #color
                "ambient"=>  [0,0,0,1],
                "diffuse"=>  [0,0,0,1],
                "specular"=> [0,0,0,1],
                "emissive"=> [0,0,0,0]
            }
            @palm =  {  # link
                'link_name'=>"palm",
                'pose'=> [0+forearm['pose'][0],
                         -0.015+forearm['pose'][1],
                          0.149+forearm['pose'][2],
                         -40*M_PI/180,0,0],
                # inetia 
                'pose_i'=> [0,0,0.035,
                                0,0,0],                   
                'mass'=> 0.3,
                'ixx'=> 0.0003581 ,'ixy'=> 0     ,'ixz'=> 0 ,
                'iyy'=> 0.0005287 ,'iyz'=> 0     ,'izz'=> 0.000191 ,
                #joint
                "p_name" =>"palm_fake",
                "j_name" =>"palm_forearm",
                "j_type" =>'fixed',
                #color
                "ambient"=>  [0,0,0,1],
                "diffuse"=>  [0,0,0,1],
                "specular"=> [0,0,0,1],
                "emissive"=> [0,0,0,0]
            }
            @palm_fake = {
                'link_name'=>"palm_fake",
                'pose'=> [-0.01+palm['pose'][0],
                         0.035+0.000909+palm['pose'][1],
                          0.002+0.0379+palm['pose'][2],
                         -40*M_PI/180,0,0],
                # inetia 
                'pose_i'=> [0,0,0.0,
                                0,0,0],                   
                'mass'=> 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000001,
                'ixx'=> 0.0 ,'ixy'=> 0     ,'ixz'=> 0 ,
                'iyy'=> 0.0 ,'iyz'=> 0     ,'izz'=> 0.0 ,
                #joint
                "p_name" =>"grasp_axis",
                "j_name" =>"palm_palm_fake",
                "j_type" =>'fixed',
                #color
                "ambient"=>  [0,0,0,1],
                "diffuse"=>  [0,0,0,1],
                "specular"=> [0,0,0,1],
                "emissive"=> [0,0,0,0]

            }
            @grasp_axis = {
                'link_name'=>"grasp_axis",
                'pose'=> [grasp_axis_offset[0]+palm_fake['pose'][0],
                          grasp_axis_offset[1]+palm_fake['pose'][1],
                          grasp_axis_offset[2]+palm_fake['pose'][2],
                         -40*M_PI/180,0,0],
                "radius"=>0.02,
                # inetia 
                'pose_i'=> [0,0,0.0,
                                0,0,0],                   
                'mass'=> 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000001,
                'ixx'=> 0.0 ,'ixy'=> 0     ,'ixz'=> 0 ,
                'iyy'=> 0.0 ,'iyz'=> 0     ,'izz'=> 0.0 ,
                #joint
                "p_name" =>"world",
                "j_name" =>"palm_fake_grasp_axis",
                "j_type" =>'fixed',
                #color
                "ambient"=>  [0,0,0,1],
                "diffuse"=>  [0,0,0,1],
                "specular"=> [0,0,0,1],
                "emissive"=> [0,0,0,0]  
            }
    
            @model={"BASE"=>{"Links"=>{}}}
            def loadYamlAndChange(path)
                file = YAML.load_file(path+"/config.yml")
                #print file 
             
                    
                #print finger
                links = file["BASE"]["Links"]
                links.each do |linkName,link|
    
                    color = link["color"]
                    mass  = link["mass"]
                    if !(linkName == "forearm")
                        joint = link["joint"]
                    end
                    
    
                    if linkName == "forearm"
                        #visual
                        @forearm["ambient"] = color["ambient"]
                        @forearm["diffuse"] = color["diffuse"]
                        @forearm["specular"] = color["specular"]
                        @forearm["emissive"] = color["emissive"]
                        #physical prop
                        @forearm["mass"] = mass
    
    
                    elsif linkName== "palm"
                        #visual
                        @palm["ambient"] = color["ambient"]
                        @palm["diffuse"] = color["diffuse"]
                        @palm["specular"] = color["specular"]
                        @palm["emissive"] = color["emissive"]
                        #physical prop
                        @palm["mass"] = mass
    
    
                    end
                end
                  
                
            end
    
            def generate_model()
                link_list = [ @forearm, @palm]
                i=0
                loop do
              
                    @model["BASE"]["Links"][link_list[i]["link_name"]]={ 
                                                                "link_name"  => link_list[i]["link_name"],
                                                                "pose"      => link_list[i]["pose"],
                                                                "mass"      =>link_list[i]["mass"],
                                                                "inertial"  => {
                                                                    "pose_i" =>link_list[i]["pose_i"],
                                                                    "ixx"    =>link_list[i]["ixx"],
                                                                    "ixy"    =>link_list[i]["ixy"],
                                                                    "ixz"    =>link_list[i]["ixz"],
                                                                    "iyy"    =>link_list[i]["iyy"],
                                                                    "iyz"    =>link_list[i]["iyz"],
                                                                    "izz"    =>link_list[i]["izz"],
    
                                                                },
                                                                "joint"     =>{
                                                                    "p_name"        =>link_list[i]["p_name"],
                                                                    "j_name"        =>link_list[i]["j_name"],
                                                                    "j_type"        =>link_list[i]["j_type"],
                                                                    "j_axis"        =>link_list[i]["j_axis"],
                                                                    "j_limit"       =>link_list[i]["j_limit"],
                                                                    "j_effort"      =>link_list[i]["j_effort"],
                                                                    "j_velocity"    =>link_list[i]["j_velocity"],
                                                                    "j_damping"     =>link_list[i]["j_damping"],
                                                                    "friction"      =>link_list[i]["friction"]
    
                                                                }
                    }
                    if i ==1
                     break
                    end
                    i =+1
               end
               #print @model
            end
            def generate_model_forReset()
                link_list = [ @forearm, @palm]
                i=0
                loop do
              
                    @model["BASE"]["Links"][link_list[i]["link_name"]]={ 
            
                            "mass"      =>link_list[i]["mass"],
    
                            "color"     =>{
                                'ambient'  => link_list[i]["ambient"] ,                                              
                                'specular' => link_list[i]["specular"],
                                'emissive' => link_list[i]["emissive"],
                                'diffuse' => link_list[i]["diffuse"] 
                            },
                            "joint"     =>{
    
                                "damping"     =>link_list[i]["j_damping"],
                                "friction"      =>link_list[i]["j_friction"]
    
                            }
                        }
                    if i == link_list.length-1
                     break
                    end
                    i +=1
              
               end
            
            end
            if load_setting == true
                loadYamlAndChange(path)
                generate_model()
            else
                generate_model_forReset()
            end
            
            path_v ={
                "palm"      => "meshes/palm2.dae",
                "forearm"   =>"meshes/forearm_lite.dae",
        
            }
            path_c ={
                "palm"      => "meshes/palm2_c.dae",
                "forearm"   =>"meshes/forearm_lite.dae",
                  
            }
            @mesh_c={}
            @mesh_v={}
            
            if sim_env == "gazebo"
                #model://+default path
                path_c.each do |key,value|
                  @mesh_c.merge!({key => "model://kuka_handlit/"+value})
                end
                path_v.each do |key,value|
                  @mesh_v.merge!({key => "model://kuka_handlit/"+value})
                end
            
            elsif sim_env == "pybullet"
                #deafult path
                @mesh_v = modefy_mesh_path(lib_path,path_v)
                @mesh_c = modefy_mesh_path(lib_path,path_c)
            else
                puts "Fingers:   well life sucks!not everything is supported.A'nt life a bitch? "
            end 
        end
    end


    
    class WorkSpace
        #constants
        M_PI = 3.1415926535897931
        attr_accessor :ee_fake, :ws,:mesh_c,:mesh_v,:model
        def initialize(sim_env,load_setting,ee,biase,rgba,lib_path,fingername)
            @ws ={  # link
                        'link_name'=>"ws_"+fingername,
                        'pose'=> [-0.032766+ee["pose"][0]+biase[0],
                        0.02376+ee["pose"][1]+biase[1],
                        0.26702 +ee["pose"][2]+biase[2],
                            degreeToRadian(0),
                            degreeToRadian(0),
                            degreeToRadian(0)
                            ],

                        "scale" =>[1, 1, 1],
                        # inetia 
                        'pose_i'=> [0,0,0.09,
                                         0,0,0],                   
                        'mass'=> 1.8,
                        'ixx'=> 0.108 ,'ixy'=> 0     ,'ixz'=> 0 ,
                        'iyy'=> 0.108 ,'iyz'=> 0     ,'izz'=> 0.054 ,
                        #joint
                        "p_name" =>ee["link_name"],
                        "j_name" =>"ws_"+fingername,
                        "j_type" =>'fixed',
                        #color
                        "ambient"=>  rgba,
                        "diffuse"=>  rgba,
                        "specular"=> rgba,
                        "emissive"=> [0,0,0,0]
            }
            @ee_fake ={
                # link
                'link_name'=>"ws_ee_"+fingername,
                'pose'=> [-0.032766+ee["pose"][0]+biase[0],
                0.02376+ee["pose"][1]+biase[1],
                0.26702 +ee["pose"][2]+biase[2],
                    degreeToRadian(0),
                    degreeToRadian(0),
                    degreeToRadian(0)
                    ],

                "scale" =>[1, 1, 1],
                # inetia 
                'pose_i'=> [0,0,0,
                                 0,0,0],                   
                'mass'=> 1.8,
                'ixx'=> 0.108 ,'ixy'=> 0     ,'ixz'=> 0 ,
                'iyy'=> 0.108 ,'iyz'=> 0     ,'izz'=> 0.054 ,
                #joint
                "p_name" =>ee["link_name"],
                "j_name" =>"ws_ee_"+fingername,
                "j_type" =>'fixed',
                #color
                "ambient"=>  rgba,
                "diffuse"=>  rgba,
                "specular"=> rgba,
                "emissive"=> [0,0,0,0]
            }
            
            
            
            path_v ={
                "ws"      => "meshes/ws/FF/FF_ws_cleaned_ADJUSTEDorigine.dae",
                
        
            }
            path_c ={
                "ws"      => "meshes/ws/FF/FF_ws_cleaned_ADJUSTEDorigine.dae",
               
                  
            }
            @mesh_c={}
            @mesh_v={}
            
            if sim_env == "gazebo"
                #model://+default path
                path_c.each do |key,value|
                  @mesh_c.merge!({key => "model://kuka_handlit/"+value})
                end
                path_v.each do |key,value|
                  @mesh_v.merge!({key => "model://kuka_handlit/"+value})
                end
            
            elsif sim_env == "pybullet"
                #deafult path
                @mesh_v = modefy_mesh_path(lib_path,path_v)
                @mesh_c = modefy_mesh_path(lib_path,path_c)
            else
                puts "Fingers:   well life sucks!not everything is supported.A'nt life a bitch? "
            end 
        end
    end

    class THWorkSpace
        #constants
        M_PI = 3.1415926535897931
        attr_accessor :ee_fake, :ws,:mesh_c,:mesh_v,:model
        def initialize(sim_env,load_setting,ee,rgba,lib_path,fingername)
            @ws ={  # link
                        'link_name'=>"ws_"+fingername,
                        'pose'=> [-0.059103+ee["pose"][0],
                        0.000536+ee["pose"][1],
                        0.23208+ee["pose"][2],
                            degreeToRadian(0),
                            degreeToRadian(0),
                            degreeToRadian(0)
                            ],

                        "scale" =>[1, 1, 1],
                        # inetia 
                        'pose_i'=> [0,0,0.09,
                                         0,0,0],                   
                        'mass'=> 1.8,
                        'ixx'=> 0.108 ,'ixy'=> 0     ,'ixz'=> 0 ,
                        'iyy'=> 0.108 ,'iyz'=> 0     ,'izz'=> 0.054 ,
                        #joint
                        "p_name" =>ee["link_name"],
                        "j_name" =>"ws_"+fingername,
                        "j_type" =>'fixed',
                        #color
                        "ambient"=>  rgba,
                        "diffuse"=>  rgba,
                        "specular"=> rgba,
                        "emissive"=> [0,0,0,0]
            }
            @ee_fake ={  # link
                        'link_name'=>"ws_ee_"+fingername,
                        'pose'=> [-0.059103+ee["pose"][0],
                        0.000536+ee["pose"][1],
                        0.23208+ee["pose"][2],
                            degreeToRadian(0),
                            degreeToRadian(0),
                            degreeToRadian(0)
                            ],

                        "scale" =>[1, 1, 1],
                        # inetia 
                        'pose_i'=> [0,0,0,
                                         0,0,0],                   
                        'mass'=> 1.8,
                        'ixx'=> 0.108 ,'ixy'=> 0     ,'ixz'=> 0 ,
                        'iyy'=> 0.108 ,'iyz'=> 0     ,'izz'=> 0.054 ,
                        #joint
                        "p_name" =>ee["link_name"],
                        "j_name" =>"ws_ee_"+fingername,
                        "j_type" =>'fixed',
                        #color
                        "ambient"=>  rgba,
                        "diffuse"=>  rgba,
                        "specular"=> rgba,
                        "emissive"=> [0,0,0,0]
            }
            
            
            
            path_v ={
                "ws"      => "meshes/ws/TH/TH_ws_cleaned_ADJUSTED_origin.dae",
                
        
            }
            path_c ={
                "ws"      => "meshes/ws/TH/TH_ws_cleaned_ADJUSTED_origin.dae",
               
                  
            }
            @mesh_c={}
            @mesh_v={}
            
            if sim_env == "gazebo"
                #model://+default path
                path_c.each do |key,value|
                  @mesh_c.merge!({key => "model://kuka_handlit/"+value})
                end
                path_v.each do |key,value|
                  @mesh_v.merge!({key => "model://kuka_handlit/"+value})
                end
            
            elsif sim_env == "pybullet"
                #deafult path
                @mesh_v = modefy_mesh_path(lib_path,path_v)
                @mesh_c = modefy_mesh_path(lib_path,path_c)
            else
                puts "Fingers:   well life sucks!not everything is supported.A'nt life a bitch? "
            end 
        end
    end
    #sim env setting
    sim_env ="pybullet" #change to pybullet|gazebo 

    load_finger = false 
    load_setting = true
    
    if load_ws =="true"
        load_ws = true
    else
        load_ws = false
    end
    if load_ws_pcd =="true"
        load_ws_pcd = true
    else
        load_ws_pcd = false
    end

    
    control_mode
    path
  
    if lib_path !=""
        lib_path
    else
        lib_path=""
    end
    
  
    #####################################hand setting######################
    # puts Dir.pwd
    
    #hand general variables
    #constants
    M_PI = 3.1415926535897931
    base = Base.new(sim_env,load_setting,path,lib_path, 
    string_array_to_array(grasp_axis_offset))
    #finger
    # This value move the finger object in x y z         
    biase = [0,0,0]
    rgba = [113,71,52,0.1]
    rgba = rgb256ToDecimal(rgba)
   
    ws_ff = WorkSpace.new(sim_env,load_setting,base.forearm,biase,rgba,lib_path,"FF")
    biase = [0.022,0.002536,0.003068]
    rgba = [187,71,52,0.1]
    rgba = rgb256ToDecimal(rgba)
  
    ws_mf = WorkSpace.new(sim_env,load_setting,base.forearm,biase,rgba,lib_path,"MF")
    biase = [0.044,0,0]
    rgba = [255,71,52,0.1]
    rgba = rgb256ToDecimal(rgba)
  
    ws_rf = WorkSpace.new(sim_env,load_setting,base.forearm,biase,rgba,lib_path,"RF")


    if control_mode=="fingers" or control_mode=="full"
 
        wees = [ws_ff,ws_mf,ws_rf]
    elsif control_mode == "FF"

        wees = [ws_ff]
    elsif control_mode == "MF"
    
        wees = [ws_mf]
    elsif control_mode == "RF"
     
        wees = [ws_rf]
  
    end


    th_ws = THWorkSpace.new(sim_env,load_setting,base.forearm,rgba,lib_path,"TH")
    
    

    if load_ws_pcd == true
        #pointcloud
        #loading pcd
        file = YAML.load_file(control_mode+".yml")["vertix"]
        # puts file[0].is_a?(Array)
        # puts file[0]
        pcds = []
        counter = 0
        loop do
            pcd = PointCloud.new(thumb.thbase,control_mode,counter.to_s,file[counter])
            pcds.push(pcd)
            if counter ==file.length-1
                break
               end
               counter +=1
        end
    end


    #saving the model
    def save_model(path,base)
        robot_model = {"Robots"=>{
                            "Hand"=>{
                                "BASE"=>base.model["BASE"]
                            }
                              
                            
                            
                    }
        }
        File.open(path+"/model_info.yml", "w") do |out|
            YAML.dump( robot_model, out )
             #{ |file| file.write(robot_model.to_yaml) }
        end
    end

    save_model(path,base)
    #resetting the setting in config yml
    def rest_modelConfigYML(base)
        robot_model = {
                     
                        "BASE"=>base.model["BASE"]
                    
                      
        }
        File.open("config.yml", "w") do |out|
            YAML.dump( robot_model, out )
          
        end
    end
    if load_setting == false
        rest_modelConfigYML(base)
    end


      
%>

<sdf version='1.6'>
  <model name="handlit">
    <link name = "world">
        <pose frame=''><%=a_to_s(base.grasp_axis['pose'])%></pose>
        <inertial>
            <pose frame=''>0 0 0.0 0 0 0</pose>
            <mass>0.0</mass>
            <inertia>
                <ixx>0.</ixx>
                <ixy>0</ixy>
                <ixz>0</ixz>
                <iyy>0.</iyy>
                <iyz>0</iyz>
                <izz>0.</izz>
            </inertia>
        </inertial>
    </link>

    <joint name="<%=base.forearm['j_name']%>" type="<%=base.forearm['j_type']%>">
        <child><%=base.forearm['link_name']%></child>
        <parent><%=base.forearm['p_name']%></parent>
    </joint>

    <!--Hand-->


    <link name ="<%=base.forearm['link_name']%>" >
        <pose frame=''><%=a_to_s(base.forearm['pose'])%></pose>
        <inertial>
            <pose frame=''><%=a_to_s(base.forearm['pose_i'])%></pose>
            <mass><%=base.forearm['mass']%></mass>
            <inertia>
                <ixx><%=base.forearm['ixx']%></ixx>
                <ixy><%=base.forearm['ixy']%></ixy>
                <ixz><%=base.forearm['ixz']%></ixz>
                <iyy><%=base.forearm['iyy']%></iyy>
                <iyz><%=base.forearm['iyz']%></iyz>
                <izz><%=base.forearm['izz']%></izz>
            </inertia>
        </inertial>

        <visual name='visual_forearm_link'>

            <geometry>
                <mesh>
                    <scale>1 1 1</scale>
                    <uri><%=base.mesh_v["forearm"]%></uri>
                </mesh>
            </geometry>
            <material>
                <ambient><%=a_to_s(base.forearm['ambient'])%></ambient>
                <diffuse><%=a_to_s(base.forearm['diffuse'])%></diffuse>
                <specular><%=a_to_s(base.forearm['specular'])%></specular>
                <emissive><%=a_to_s(base.forearm['emissive'])%></emissive>
            </material>
        </visual>
        <collision name='collision_forearm_link'>
        
            <geometry>
                <mesh>
                    <scale>1 1 1</scale>
                    <uri><%=base.mesh_c["forearm"]%></uri>
                </mesh>
            </geometry>
        </collision>
    </link>

    <link name = "<%=base.palm['link_name']%>">
        <pose frame=''><%=a_to_s(base.palm['pose'])%></pose>
        <inertial>
            <pose frame=''><%=a_to_s(base.palm['pose_i'])%></pose>
            <mass><%=base.palm['mass']%></mass>
            <inertia>
                <ixx><%=base.palm['ixx']%></ixx>
                <ixy><%=base.palm['ixy']%></ixy>
                <ixz><%=base.palm['ixz']%></ixz>
                <iyy><%=base.palm['iyy']%></iyy>
                <iyz><%=base.palm['iyz']%></iyz>
                <izz><%=base.palm['izz']%></izz>
            </inertia>
        </inertial>
        
        <visual name='visual_palm_link'>

            <geometry>
                <mesh>
                    <scale>-0.001 0.001 0.001</scale>
                    <uri><%= base.mesh_v["palm"] %></uri>
                </mesh>
            </geometry>
            <material>
                <ambient><%=a_to_s(base.palm['ambient'])%></ambient>
                <diffuse><%=a_to_s(base.palm['diffuse'])%></diffuse>
                <specular><%=a_to_s(base.palm['specular'])%></specular>
                <emissive><%=a_to_s(base.palm['emissive'])%></emissive>
            </material>
        </visual>
        <collision name="collision_palm_link">

            <geometry>
                <mesh>
                    <scale>-0.001 0.001 0.001</scale>
                <uri><%= base.mesh_c["palm"] %></uri>
            </mesh>
            </geometry>
        </collision>


        
    </link>
    <joint name="<%=base.palm['j_name']%>" type="<%=base.palm['j_type']%>">
        <child><%=base.palm['link_name']%></child>
        <parent><%=base.palm['p_name']%></parent>
        <axis>

            <xyz>0 -1 0</xyz>
         </axis>
    </joint>  

    
    <link name = "<%=base.palm_fake['link_name']%>">

        <pose frame=''><%=a_to_s(base.palm_fake['pose'])%></pose>
        <inertial>
            <pose frame=''><%=a_to_s(base.palm_fake['pose_i'])%></pose>
            <mass><%=base.palm_fake['mass']%></mass>
            <inertia>
                <ixx><%=base.palm_fake['ixx']%></ixx>
                <ixy><%=base.palm_fake['ixy']%></ixy>
                <ixz><%=base.palm_fake['ixz']%></ixz>
                <iyy><%=base.palm_fake['iyy']%></iyy>
                <iyz><%=base.palm_fake['iyz']%></iyz>
                <izz><%=base.palm_fake['izz']%></izz>
            </inertia>
        </inertial>
        <visual name='visual_palm_fake'>
            <geometry>
                <sphere>
                <radius>0.01</radius>
                </sphere>
            </geometry>
            <material>
                <ambient>0.5672216218105076 0.531815859282997 0.5801439037594547   0.1</ambient>
                <diffuse>0.5464167892541046 0.6932951350253517 0.22253023363722557 0.1</diffuse>
                <specular>0.9022550019258972 0.9029306286118689 0.5969458319897258 0.1</specular>
                <emissive>0 0 0 0</emissive>
            </material>
        </visual>
    </link>

    <joint name="<%=base.palm_fake['j_name']%>" type="<%=base.palm_fake['j_type']%>">
        <child><%=base.palm_fake['link_name']%></child>
        <parent><%=base.palm_fake['p_name']%></parent>
        <axis>

            <xyz>0 -1 0</xyz>
         </axis>
    </joint>  

 
    <link name = "<%=base.grasp_axis['link_name']%>">

        <pose frame=''><%=a_to_s(base.grasp_axis['pose'])%></pose>
        <inertial>
            <pose frame=''><%=a_to_s(base.grasp_axis['pose_i'])%></pose>
            <mass><%=base.grasp_axis['mass']%></mass>
            <inertia>
                <ixx><%=base.grasp_axis['ixx']%></ixx>
                <ixy><%=base.grasp_axis['ixy']%></ixy>
                <ixz><%=base.grasp_axis['ixz']%></ixz>
                <iyy><%=base.grasp_axis['iyy']%></iyy>
                <iyz><%=base.grasp_axis['iyz']%></iyz>
                <izz><%=base.grasp_axis['izz']%></izz>
            </inertia>
        </inertial>
        <visual name='visual_grasp_axis'>
            <geometry>
                <sphere>
                <radius><%=base.grasp_axis['radius']%></radius>
                </sphere>
            </geometry>
            <material>
                <ambient> 0.4 0.1 0.1 0.1</ambient>
                <diffuse> 0.4 0.1 0.1 0.1</diffuse>
                <specular>0.4 0.1 0.1 0.1</specular>
                <emissive>0 0 0 0</emissive>
            </material>
        </visual>
    </link>

    <joint name="<%=base.grasp_axis['j_name']%>" type="<%=base.grasp_axis['j_type']%>">
        <child><%=base.grasp_axis['link_name']%></child>
        <parent><%=base.grasp_axis['p_name']%></parent>
        <axis>

            <xyz>0 -1 0</xyz>
         </axis>
    </joint> 

    
    <%if load_ws == true and control_mode !="TH" %>

         <% wees.each do |ws|%>
   

            <link name =  "<%=ws.ws['link_name']%>">
                <pose frame=''><%=a_to_s(ws.ws['pose'])%></pose>
                <inertial>
                    <pose frame=''><%=a_to_s(ws.ws['pose_i'])%></pose>
                    <mass><%=ws.ws['mass']%></mass>
                    <inertia>
                        <ixx><%=ws.ws['ixx']%></ixx>
                        <ixy><%=ws.ws['ixy']%></ixy>
                        <ixz><%=ws.ws['ixz']%></ixz>
                        <iyy><%=ws.ws['iyy']%></iyy>
                        <iyz><%=ws.ws['iyz']%></iyz>
                        <izz><%=ws.ws['izz']%></izz>
                    </inertia>
                </inertial>

                <visual name='visual_<%=ws.ws['link_name']%>'>

                    <geometry>
                        <mesh>
                             <scale><%=a_to_s(ws.ws['scale'])%></scale>
                            <uri><%= ws.mesh_v['ws'] %></uri>
                        </mesh>
                    </geometry>
                    <material>
                        <ambient><%=a_to_s(ws.ws['ambient'])%></ambient>
                        <diffuse><%=a_to_s(ws.ws['diffuse'])%></diffuse>
                        <specular><%=a_to_s(ws.ws['specular'])%></specular>
                        <emissive><%=a_to_s(ws.ws['emissive'])%></emissive>
                    </material>
                </visual>
            </link>

            <joint name = "<%=ws.ws['j_name']%>"  type ="<%=ws.ws['j_type']%>">
               <child><%=ws.ws['link_name']%></child>
                <parent><%=ws.ws['p_name']%></parent>
                <axis>
                    <xyz><%=a_to_s(ws.ws['j_axis'])%></xyz>
                </axis>
            </joint>


            <link name = "<%=ws.ee_fake['link_name']%>">

                <pose frame=''><%=a_to_s(ws.ee_fake['pose'])%></pose>
                <inertial>
                    <pose frame=''><%=a_to_s(ws.ee_fake['pose_i'])%></pose>
                    <mass><%=ws.ee_fake['mass']%></mass>
                    <inertia>
                        <ixx><%=ws.ee_fake['ixx']%></ixx>
                        <ixy><%=ws.ee_fake['ixy']%></ixy>
                        <ixz><%=ws.ee_fake['ixz']%></ixz>
                        <iyy><%=ws.ee_fake['iyy']%></iyy>
                        <iyz><%=ws.ee_fake['iyz']%></iyz>
                        <izz><%=ws.ee_fake['izz']%></izz>
                    </inertia>
                </inertial>
                <visual name='visual_ee_fake'>
                    <geometry>
                        <sphere>
                        <radius>0.01</radius>
                        </sphere>
                    </geometry>
                    <material>
                        <ambient>0.5672216218105076 0.531815859282997 0.5801439037594547   0.1</ambient>
                        <diffuse>0.5464167892541046 0.6932951350253517 0.22253023363722557 0.1</diffuse>
                        <specular>0.9022550019258972 0.9029306286118689 0.5969458319897258 0.1</specular>
                        <emissive>0 0 0 0</emissive>
                    </material>
                </visual>
            </link>
    
            <joint name="<%=ws.ee_fake['j_name']%>" type="<%=ws.ee_fake['j_type']%>">
                <child><%=ws.ee_fake['link_name']%></child>
                <parent><%=ws.ee_fake['p_name']%></parent>
                <axis>
            
                    <xyz>0 -1 0</xyz>
                 </axis>
            </joint>  

         <%end%> 
    <%end%>



    <%if (control_mode =="full" or control_mode == "TH")and load_ws == true%>
            <link name =  "<%=th_ws.ws['link_name']%>">
                <pose frame=''><%=a_to_s(th_ws.ws['pose'])%></pose>
                <inertial>
                    <pose frame=''><%=a_to_s(th_ws.ws['pose_i'])%></pose>
                    <mass><%=th_ws.ws['mass']%></mass>
                    <inertia>
                        <ixx><%=th_ws.ws['ixx']%></ixx>
                        <ixy><%=th_ws.ws['ixy']%></ixy>
                        <ixz><%=th_ws.ws['ixz']%></ixz>
                        <iyy><%=th_ws.ws['iyy']%></iyy>
                        <iyz><%=th_ws.ws['iyz']%></iyz>
                        <izz><%=th_ws.ws['izz']%></izz>
                    </inertia>
                </inertial>

                <visual name='visual_<%=th_ws.ws['link_name']%>'>

                    <geometry>
                        <mesh>
                             <scale><%=a_to_s(th_ws.ws['scale'])%></scale>
                            <uri><%= th_ws.mesh_v['ws'] %></uri>
                        </mesh>
                    </geometry>
                    <material>
                        <ambient><%=a_to_s(th_ws.ws['ambient'])%></ambient>
                        <diffuse><%=a_to_s(th_ws.ws['diffuse'])%></diffuse>
                        <specular><%=a_to_s(th_ws.ws['specular'])%></specular>
                        <emissive><%=a_to_s(th_ws.ws['emissive'])%></emissive>
                    </material>
                </visual>
            </link>

            <joint name = "<%=th_ws.ws['j_name']%>"  type ="<%=th_ws.ws['j_type']%>">
               <child><%=th_ws.ws['link_name']%></child>
                <parent><%=th_ws.ws['p_name']%></parent>
                <axis>
                    <xyz><%=a_to_s(th_ws.ws['j_axis'])%></xyz>
                </axis>
            </joint>

            <link name = "<%=th_ws.ee_fake['link_name']%>">

                <pose frame=''><%=a_to_s(th_ws.ee_fake['pose'])%></pose>
                <inertial>
                    <pose frame=''><%=a_to_s(th_ws.ee_fake['pose_i'])%></pose>
                    <mass><%=th_ws.ee_fake['mass']%></mass>
                    <inertia>
                        <ixx><%=th_ws.ee_fake['ixx']%></ixx>
                        <ixy><%=th_ws.ee_fake['ixy']%></ixy>
                        <ixz><%=th_ws.ee_fake['ixz']%></ixz>
                        <iyy><%=th_ws.ee_fake['iyy']%></iyy>
                        <iyz><%=th_ws.ee_fake['iyz']%></iyz>
                        <izz><%=th_ws.ee_fake['izz']%></izz>
                    </inertia>
                </inertial>
                <visual name='visual_ee_fake'>
                    <geometry>
                        <sphere>
                        <radius>0.01</radius>
                        </sphere>
                    </geometry>
                    <material>
                        <ambient>0.5672216218105076 0.531815859282997 0.5801439037594547   0.1</ambient>
                        <diffuse>0.5464167892541046 0.6932951350253517 0.22253023363722557 0.1</diffuse>
                        <specular>0.9022550019258972 0.9029306286118689 0.5969458319897258 0.1</specular>
                        <emissive>0 0 0 0</emissive>
                    </material>
                </visual>
            </link>
    
            <joint name="<%=th_ws.ee_fake['j_name']%>" type="<%=th_ws.ee_fake['j_type']%>">
                <child><%=th_ws.ee_fake['link_name']%></child>
                <parent><%=th_ws.ee_fake['p_name']%></parent>
                <axis>
            
                    <xyz>0 -1 0</xyz>
                 </axis>
            </joint> 
    <%end%>
   
   
 
  </model>

</sdf>